# -*- coding: utf-8 -*-
"""finance.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PYeFp_Se5-R4vQfLL4BJRIxac_nFeBF2
"""

# Import libraries and load dataset
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
df = pd.read_csv(r"C:\Users\gupta\Downloads\Financial Statements.csv")

# View basic info
print(df.info())

# Drop rows with missing Market Cap (only 1)
df.dropna(subset=['Market Cap(in B USD)'], inplace=True)

# Convert Year to datetime for time series
df['Year'] = pd.to_datetime(df['Year'], format='%Y')

# Sort values for forecasting
df.columns = df.columns.str.strip()

df = df.sort_values(by = ['Company', 'Year'])

# Display cleaned sample
df.head()

"""Forecasting Revenue, and net income for AAPL"""

#Filterig for Apple
df_company = df[df['Company'] == 'AAPL'][['Year', 'Revenue', 'Net Income']].copy()

df_company.set_index('Year', inplace=True)

#Display the cleaned dataset
df_company

import matplotlib.pyplot as plt

# Make sure the index is datetime
df_company.index = pd.to_datetime(df_company.index, format='%Y')

# Plot Revenue
plt.figure(figsize=(8, 5))
plt.plot(df_company.index.year, df_company['Revenue'], marker='o', color='blue')
plt.title('Apple - Revenue Over Time')
plt.xlabel('Year')
plt.ylabel('Revenue (in millions)')
plt.grid(True)
plt.tight_layout()
plt.show()

# Plot Net Income
plt.figure(figsize=(8, 5))
plt.plot(df_company.index.year, df_company['Net Income'], marker='o', color='green')
plt.title('Apple - Net Income Over Time')
plt.xlabel('Year')
plt.ylabel('Net Income (in millions)')
plt.grid(True)
plt.tight_layout()
plt.show()

# Train Linear Regression Model for Revenue Forecasting

from sklearn.linear_model import LinearRegression
import numpy as np

# Prepare the data
df_revenue_lr = df_company[['Revenue']].copy()
df_revenue_lr['Year'] = df_revenue_lr.index.year  # Convert datetime index to numeric year

# Define independent (X) and dependent (y) variables
X = df_revenue_lr[['Year']]  # Predictor
y = df_revenue_lr['Revenue']  # Target

# Initialize and fit the model
model = LinearRegression()
model.fit(X, y)

# Print model parameters
print("Slope (Revenue growth per year):", model.coef_[0])
print("Intercept:", model.intercept_)

import matplotlib.pyplot as plt
import pandas as pd

# Create a range of future years (2023â€“2028)
future_years = pd.DataFrame({'Year': np.arange(2023, 2029)})

# Predict future revenue using the trained model
future_revenue = model.predict(future_years)

# Combine future predictions into a DataFrame
forecast_df = future_years.copy()
forecast_df['Predicted Revenue'] = future_revenue

# Plot actual and forecasted revenue
plt.figure(figsize=(10, 5))

# Historical data
plt.plot(df_revenue_lr['Year'], df_revenue_lr['Revenue'], label='Historical Revenue', marker='o')

# Forecasted data
plt.plot(forecast_df['Year'], forecast_df['Predicted Revenue'], label='Forecasted Revenue', marker='o', linestyle='--', color='orange')

plt.title('Apple Revenue Forecast (Linear Regression)')
plt.xlabel('Year')
plt.ylabel('Revenue (in millions)')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

# Optionally display the forecasted values
print(forecast_df)

# Forecast Net Income using Linear Regression
# Prepare Net Income data
df_net_income = df_company[['Net Income']].copy()
df_net_income['Year'] = df_net_income.index.year

# Define variables
X_net = df_net_income[['Year']]
y_net = df_net_income['Net Income']

# Fit model
model_net = LinearRegression()
model_net.fit(X_net, y_net)

# Forecast Net Income for future years (2023â€“2028)
future_years_net = pd.DataFrame({'Year': np.arange(2023, 2029)})
future_net_income = model_net.predict(future_years_net)

# Create forecast DataFrame
forecast_net_df = future_years_net.copy()
forecast_net_df['Predicted Net Income'] = future_net_income

# Plot historical + forecasted Net Income
plt.figure(figsize=(10, 5))
plt.plot(df_net_income['Year'], df_net_income['Net Income'], label='Historical Net Income', marker='o', color='green')
plt.plot(forecast_net_df['Year'], forecast_net_df['Predicted Net Income'], label='Forecasted Net Income', marker='o', linestyle='--', color='orange')
plt.title('Apple Net Income Forecast (Linear Regression)')
plt.xlabel('Year')
plt.ylabel('Net Income (in millions)')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

# Display forecasted values
print(forecast_net_df)

"""To understand operational efficiency and financial health I will use NET PROFIT MARGIN over time and YEAR-OVER-YEAR(YOY) GROWTH for both revenue and income  """

# Calculate Financial KPIs for Apple

# Reuse the cleaned DataFrame from previous steps
df_kpis = df_company.copy()

# Calculate Net Profit Margin (%)
df_kpis['Net Profit Margin (%)'] = (df_kpis['Net Income'] / df_kpis['Revenue']) * 100

# Calculate YoY Growth for Revenue and Net Income
df_kpis['Revenue YoY Growth (%)'] = df_kpis['Revenue'].pct_change() * 100
df_kpis['Net Income YoY Growth (%)'] = df_kpis['Net Income'].pct_change() * 100

# Reset index for plotting
kpi_df_plot = df_kpis.reset_index()

# Plot Net Profit Margin over time
plt.figure(figsize=(10, 5))
plt.plot(kpi_df_plot['Year'].dt.year, kpi_df_plot['Net Profit Margin (%)'], marker='o', color='purple')
plt.title('Apple - Net Profit Margin Over Time')
plt.xlabel('Year')
plt.ylabel('Net Profit Margin (%)')
plt.grid(True)
plt.tight_layout()
plt.show()

# Plot Revenue YoY Growth over time
plt.figure(figsize=(10, 5))
plt.plot(kpi_df_plot['Year'].dt.year, kpi_df_plot['Revenue YoY Growth (%)'], marker='o', color='blue', label='Revenue')
plt.plot(kpi_df_plot['Year'].dt.year, kpi_df_plot['Net Income YoY Growth (%)'], marker='o', color='green', label='Net Income')
plt.title('Apple - YoY Growth (%)')
plt.xlabel('Year')
plt.ylabel('Growth (%)')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

# Display the KPI table
df_kpis[['Revenue', 'Net Income', 'Net Profit Margin (%)', 'Revenue YoY Growth (%)', 'Net Income YoY Growth (%)']]

"""Next step aims to help assess risks and opportunities under different growth assumptions. I aim to visualize Best case (10% YoY), Base Case(5%) and Worst case(0%) revenue projections for stock from 2023-2028."""

# Filter Apple-specific data
df_company = df[df['Company'] == 'AAPL'].copy()
df_company['Year'] = pd.to_datetime(df_company['Year'], format='%Y')
df_company.set_index('Year', inplace=True)
# EBITDA Margin Calculation
df_company['EBITDA Margin (%)'] = (df_company['EBITDA'] / df_company['Revenue']) * 100
plt.figure(figsize=(8, 4))
plt.plot(df_company.index.year, df_company['EBITDA Margin (%)'], marker='o', color='teal')
plt.title("Apple EBITDA Margin Over Time")
plt.xlabel("Year")
plt.ylabel("EBITDA Margin (%)")
plt.grid(True)
plt.tight_layout()
plt.show()

# Free Cash Flow per Share Growth
df_company['FCF/share YoY Growth (%)'] = df_company['Free Cash Flow per Share'].pct_change() * 100
plt.figure(figsize=(8, 4))
plt.plot(df_company.index.year, df_company['FCF/share YoY Growth (%)'], marker='o', color='darkorange')
plt.title("Apple Free Cash Flow per Share Growth")
plt.xlabel("Year")
plt.ylabel("YoY Growth (%)")
plt.grid(True)
plt.tight_layout()
plt.show()

# Cash Flow Breakdown
plt.figure(figsize=(10, 6))
plt.plot(df_company.index.year, df_company['Cash Flow from Operating'], marker='o', label='Operating CF')
plt.plot(df_company.index.year, df_company['Cash Flow from Investing'], marker='o', label='Investing CF')
plt.plot(df_company.index.year, df_company['Cash Flow from Financial Activities'], marker='o', label='Financing CF')
plt.title("Apple Cash Flow Breakdown")
plt.xlabel("Year")
plt.ylabel("Cash Flow (in millions)")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

# Show final data preview
df_company[['Revenue', 'EBITDA', 'EBITDA Margin (%)', 'Free Cash Flow per Share', 'FCF/share YoY Growth (%)',
            'Cash Flow from Operating', 'Cash Flow from Investing', 'Cash Flow from Financial Activities']]

# Streamlit Dashboard with Dynamic Company Selection

import streamlit as st

df['Year'] = pd.to_datetime(df['Year'], format='%Y')

# Streamlit app setup
st.title("ðŸ“Š Financial Dashboard: Multi-Company Forecast & KPI Insights")
st.markdown("Select a company from the dropdown to view performance, KPIs, and cash flow analysis.")

# Dropdown for selecting company
company_options = df['Company'].unique()
selected_company = st.selectbox("Choose a Company:", sorted(company_options))

# Filter data for selected company
df_company = df[df['Company'] == selected_company].copy()
df_company.set_index('Year', inplace=True)

# Calculated Metrics
df_company['EBITDA Margin (%)'] = (df_company['EBITDA'] / df_company['Revenue']) * 100
df_company['FCF/share YoY Growth (%)'] = df_company['Free Cash Flow per Share'].pct_change() * 100

# Historical Revenue & Net Income
st.header(f"{selected_company} - Revenue & Net Income Over Time")
fig1, ax1 = plt.subplots(figsize=(10, 5))
ax1.plot(df_company.index.year, df_company['Revenue'], label='Revenue', marker='o')
ax1.plot(df_company.index.year, df_company['Net Income'], label='Net Income', marker='o')
ax1.set_xlabel("Year")
ax1.set_ylabel("(in millions)")
ax1.set_title(f"{selected_company} - Financial Performance")
ax1.legend()
st.pyplot(fig1)

# KPI Charts
st.header("EBITDA Margin & Free Cash Flow/share Growth")
fig2, ax2 = plt.subplots(figsize=(10, 4))
ax2.plot(df_company.index.year, df_company['EBITDA Margin (%)'], label='EBITDA Margin (%)', marker='o', color='teal')
ax2.set_ylabel("EBITDA Margin (%)")
ax2.set_xlabel("Year")
ax2.legend()
st.pyplot(fig2)

fig3, ax3 = plt.subplots(figsize=(10, 4))
ax3.plot(df_company.index.year, df_company['FCF/share YoY Growth (%)'], label='FCF/share Growth (%)', marker='o', color='darkorange')
ax3.set_ylabel("Growth (%)")
ax3.set_xlabel("Year")
ax3.legend()
st.pyplot(fig3)

# Cash Flow Breakdown
st.header("Cash Flow Health")
fig4, ax4 = plt.subplots(figsize=(10, 6))
ax4.plot(df_company.index.year, df_company['Cash Flow from Operating'], label='Operating CF', marker='o')
ax4.plot(df_company.index.year, df_company['Cash Flow from Investing'], label='Investing CF', marker='o')
ax4.plot(df_company.index.year, df_company['Cash Flow from Financial Activities'], label='Financing CF', marker='o')
ax4.set_title("Cash Flow Breakdown")
ax4.set_xlabel("Year")
ax4.set_ylabel("Cash Flow (in millions)")
ax4.legend()
st.pyplot(fig4)

# Optional forecast section (manual linear regression or placeholder)
st.markdown("---")
st.markdown("**Note:** Forecasting and scenario-based projections can be added for each company using time series models.")



#  Automated Company-Wise Insights Summary from CSV

# Load and clean the data
df['Year'] = pd.to_datetime(df['Year'], format='%Y')

# List of unique companies
companies = df['Company'].unique()

# Summary dictionary
company_summaries = []

for company in companies:
    cdf = df[df['Company'] == company].copy()
    cdf.sort_values(by='Year', inplace=True)

    # Metrics
    revenue_growth = (cdf['Revenue'].iloc[-1] - cdf['Revenue'].iloc[0]) / cdf['Revenue'].iloc[0] * 100
    net_income_growth = (cdf['Net Income'].iloc[-1] - cdf['Net Income'].iloc[0]) / cdf['Net Income'].iloc[0] * 100
    avg_ebitda_margin = (cdf['EBITDA'] / cdf['Revenue']).mean() * 100
    fcf_growth = (cdf['Free Cash Flow per Share'].iloc[-1] - cdf['Free Cash Flow per Share'].iloc[0]) / cdf['Free Cash Flow per Share'].iloc[0] * 100
    op_cf_positive_years = (cdf['Cash Flow from Operating'] > 0).sum()
    total_years = len(cdf)

    summary = {
        "Company": company,
        "Revenue Growth (%)": round(revenue_growth, 2),
        "Net Income Growth (%)": round(net_income_growth, 2),
        "Avg EBITDA Margin (%)": round(avg_ebitda_margin, 2),
        "Free CF/share Growth (%)": round(fcf_growth, 2),
        "% Years with Positive Op CF": round(op_cf_positive_years / total_years * 100, 2)
    }
    company_summaries.append(summary)

# Convert to DataFrame
summary_df = pd.DataFrame(company_summaries)

# Display the summary in output
print("\nðŸ“Š Company-Wise Financial Insights Summary:\n")
print(summary_df.to_string(index=False))